#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(location = 0) in vec3 FragPos;
layout(location = 1) in vec2 TexCoords;
layout(location = 2) in vec3 TangentLightPos;
layout(location = 3) in vec3 TangentLightDir;
layout(location = 4) in vec3 TangentViewPos;
layout(location = 5) in vec3 TangentFragPos;

layout(location = 0) out vec4 outColor;

layout(binding = 1) uniform UboObject 
{
	vec4 color;
} object;
layout(binding = 2) uniform sampler2D diffuse;
layout(binding = 3) uniform sampler2D specular;
layout(binding = 4) uniform sampler2D normal;

void main() 
{
    vec3 aNormal = texture(normal, TexCoords).rgb;
    aNormal = normalize(aNormal * 2.0 - 1.0);
	
    vec3 ambient = 0.3 * texture(diffuse, TexCoords).rgb;

    vec3 lightDir = normalize(-TangentLightDir);
    float diff = max(dot(lightDir, aNormal), 0.0);
    vec3 diffuse = diff * texture(diffuse, TexCoords).rgb;

    vec3 viewDir = normalize(TangentViewPos - TangentFragPos);
	vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(aNormal, halfwayDir), 0.0), 64.0);
    vec3 specular = spec * vec3(texture(specular, TexCoords).r);

    outColor = vec4(ambient + diffuse + specular, 1.0);
}